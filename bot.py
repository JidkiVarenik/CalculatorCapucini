import telebot
import random
from telebot import types

API_TOKEN = '7967291178:AAFSigabpCDo1m2t4VdPfmF8bABCmLK5V4M'
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEMS = {
    # –û—Ä—É–∂–∏–µ
    "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á": {"id": 1, "name": "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", "type": "weapon", "hp_bonus": 0, "damage_range": (8, 12), "durability": 300, "weight": 4},
    "–û–≥–Ω–µ–Ω–Ω—ã–π –∫–∏–Ω–∂–∞–ª": {"id": 2, "name": "–û–≥–Ω–µ–Ω–Ω—ã–π –∫–∏–Ω–∂–∞–ª", "type": "weapon", "hp_bonus": 0, "damage_range": (5, 9), "durability": 150, "weight": 2},
    "–õ–µ–¥—è–Ω–æ–π —Ç–æ–ø–æ—Ä": {"id": 3, "name": "–õ–µ–¥—è–Ω–æ–π —Ç–æ–ø–æ—Ä", "type": "weapon", "hp_bonus": 5, "damage_range": (10, 14), "durability": 200, "weight": 6},
    "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –ø–æ—Å–æ—Ö": {"id": 4, "name": "–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –ø–æ—Å–æ—Ö", "type": "weapon", "hp_bonus": 10, "damage_range": (6, 11), "durability": 180, "weight": 3},
    "–î—Ä–∞–∫–æ–Ω–∏–π –∫–ª–∏–Ω–æ–∫": {"id": 5, "name": "–î—Ä–∞–∫–æ–Ω–∏–π –∫–ª–∏–Ω–æ–∫", "type": "weapon", "hp_bonus": 20, "damage_range": (12, 16), "durability": 400, "weight": 5},

    # –ë—Ä–æ–Ω—è
    "–ë—Ä–æ–Ω—è —Å—Ç—Ä–∞–∂–∞": {"id": 6, "name": "–ë—Ä–æ–Ω—è —Å—Ç—Ä–∞–∂–∞", "type": "armor", "hp_bonus": 25, "damage_reduction": 0.08, "durability": 350, "weight": 6},
    "–ë—Ä–æ–Ω—è —Å–ª–µ–¥–æ–ø—ã—Ç–∞": {"id": 7, "name": "–ë—Ä–æ–Ω—è —Å–ª–µ–¥–æ–ø—ã—Ç–∞", "type": "armor", "hp_bonus": 10, "damage_reduction": 0.03, "durability": 200, "weight": 3},
    "–û–≥–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏": {"id": 8, "name": "–û–≥–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏", "type": "armor", "hp_bonus": 15, "damage_reduction": 0.05, "durability": 250, "weight": 4},
    "–õ–µ–¥—è–Ω–æ–π –ø–∞–Ω—Ü–∏—Ä—å": {"id": 9, "name": "–õ–µ–¥—è–Ω–æ–π –ø–∞–Ω—Ü–∏—Ä—å", "type": "armor", "hp_bonus": 20, "damage_reduction": 0.06, "durability": 300, "weight": 5},
    "–î—Ä–∞–∫–æ–Ω–∏–π –¥–æ—Å–ø–µ—Ö": {"id": 10, "name": "–î—Ä–∞–∫–æ–Ω–∏–π –¥–æ—Å–ø–µ—Ö", "type": "armor", "hp_bonus": 40, "damage_reduction": 0.12, "durability": 500, "weight": 7},

    # –ó–µ–ª—å—è
    "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è": {"id": 11, "name": "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "type": "potion", "hp_bonus": 25, "consumable": True, "weight": 1},
    "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è": {"id": 12, "name": "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "type": "potion", "hp_bonus": 60, "consumable": True, "durability": 200, "weight": 2},
    "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏": {"id": 13, "name": "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏", "type": "potion", "damage_bonus": 5, "consumable": True, "weight": 1},
    "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏": {"id": 14, "name": "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏", "type": "potion", "damage_bonus": 8, "consumable": True, "weight": 2},
    "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏": {"id": 15, "name": "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏", "type": "potion", "damage_reduction": 0.05, "consumable": True, "weight": 1},
    "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏": {"id": 16, "name": "–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏", "type": "potion", "damage_reduction": 0.08, "consumable": True, "weight": 2},

    # –†—é–∫–∑–∞–∫–∏
    "–ú–∞–ª—ã–π —Ä—é–∫–∑–∞–∫": {"id": 17, "name": "–ú–∞–ª—ã–π —Ä—é–∫–∑–∞–∫", "type": "backpack", "capacity_bonus": 10, "weight": 2},
    "–°—Ä–µ–¥–Ω–∏–π —Ä—é–∫–∑–∞–∫": {"id": 18, "name": "–°—Ä–µ–¥–Ω–∏–π —Ä—é–∫–∑–∞–∫", "type": "backpack", "capacity_bonus": 25, "weight": 4},
    "–ë–æ–ª—å—à–æ–π —Ä—é–∫–∑–∞–∫": {"id": 19, "name": "–ë–æ–ª—å—à–æ–π —Ä—é–∫–∑–∞–∫", "type": "backpack", "capacity_bonus": 50, "weight": 6}
}

BASE_CAPACITY = 20

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
player = {
    "hp": 100,
    "inventory": [],
    "equipment": {
        "helmet": None,
        "armor": None,
        "boots": None,
        "weapon": None,
        "backpack": None
    },
    "capacity": BASE_CAPACITY
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª—É—Ç–∞
current_loot = []

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        types.KeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        types.KeyboardButton("–°–æ—Å—Ç–æ—è–Ω–∏–µ"),
        types.KeyboardButton("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
    )
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /loot –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
def show_inventory(message):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    current_weight = sum(item['weight'] for item in player['inventory'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä—é–∫–∑–∞–∫
    backpack = player['equipment']['backpack']
    if backpack:
        capacity = BASE_CAPACITY + backpack['capacity_bonus']
    else:
        capacity = BASE_CAPACITY

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    inventory_message = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
    if player['inventory']:
        for item in player['inventory']:
            item_name = item['name']
            if item in player['equipment'].values():
                item_name += " (–ù–ê–î–ï–¢–û)"
            inventory_message += f"- {item_name} (–í–µ—Å: {item['weight']})\n"
    else:
        inventory_message += "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.\n"

    inventory_message += f"\n–¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight}/{capacity}"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
    markup = types.InlineKeyboardMarkup()
    equip_btn = types.InlineKeyboardButton("–ù–∞–¥–µ—Ç—å", callback_data="equip_item")
    discard_btn = types.InlineKeyboardButton("–í—ã–∫–∏–Ω—É—Ç—å", callback_data="discard_item")
    markup.add(equip_btn, discard_btn)

    bot.send_message(message.chat.id, inventory_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "equip_item")
def equip_item_prompt(call):
    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç—ã
    available_items = [item for item in player['inventory'] if item['type'] in player['equipment'] and item not in player['equipment'].values()]

    if available_items:
        markup = types.InlineKeyboardMarkup()
        for item in available_items:
            btn = types.InlineKeyboardButton(item['name'], callback_data=f"equip_{item['name']}")
            markup.add(btn)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ü–†–ï–î–ú–ï–¢–û–í")

@bot.callback_query_handler(func=lambda call: call.data.startswith("equip_"))
def equip_item(call):
    item_name = call.data.replace("equip_", "")
    item = next((i for i in player['inventory'] if i['name'] == item_name), None)

    if item:
        # –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if player['equipment'][item['type']]:
            unequipped_item = player['equipment'][item['type']]
            player['inventory'].append(unequipped_item)

        # –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        player['equipment'][item['type']] = item
        player['inventory'].remove(item)

        bot.answer_callback_query(call.id, text=f"–¢—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª: {item['name']}")
    else:
        bot.answer_callback_query(call.id, text="–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")

@bot.callback_query_handler(func=lambda call: call.data == "discard_item")
def discard_item_prompt(call):
    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å (–Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω—ã)
    discardable_items = [item for item in player['inventory'] if item not in player['equipment'].values()]

    if discardable_items:
        markup = types.InlineKeyboardMarkup()
        for item in discardable_items:
            btn = types.InlineKeyboardButton(item['name'], callback_data=f"discard_{item['name']}")
            markup.add(btn)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–∫–∏–¥—ã–≤–∞–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ü–†–ï–î–ú–ï–¢–û–í")

@bot.callback_query_handler(func=lambda call: call.data.startswith("discard_"))
def discard_item(call):
    item_name = call.data.replace("discard_", "")
    item = next((i for i in player['inventory'] if i['name'] == item_name), None)

    if item:
        player['inventory'].remove(item)
        bot.answer_callback_query(call.id, text=f"–¢—ã –≤—ã–∫–∏–Ω—É–ª: {item['name']}")
    else:
        bot.answer_callback_query(call.id, text="–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")

@bot.message_handler(func=lambda message: message.text == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
def show_guide(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–û—Ä—É–∂–∏–µ", callback_data="guide_weapon"),
        types.InlineKeyboardButton("–ó–µ–ª—å—è", callback_data="guide_potions"),
        types.InlineKeyboardButton("–ë—Ä–æ–Ω—è", callback_data="guide_armor"),
        types.InlineKeyboardButton("–í—Ä–∞–≥–∏", callback_data="guide_enemies"),
        types.InlineKeyboardButton("–ú–∏—Ä–Ω—ã–µ –º–æ–±—ã", callback_data="guide_npcs")
    )
    bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "guide_weapon")
def guide_weapon_category(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", callback_data="weapon_1"),
        types.InlineKeyboardButton("–û–≥–Ω–µ–Ω–Ω—ã–π –∫–∏–Ω–∂–∞–ª", callback_data="weapon_2"),
        types.InlineKeyboardButton("–õ–µ–¥—è–Ω–æ–π —Ç–æ–ø–æ—Ä", callback_data="weapon_3"),
        types.InlineKeyboardButton("–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –ø–æ—Å–æ—Ö", callback_data="weapon_4"),
        types.InlineKeyboardButton("–î—Ä–∞–∫–æ–Ω–∏–π –∫–ª–∏–Ω–æ–∫", callback_data="weapon_5")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–û—Ä—É–∂–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("weapon_"))
def show_weapon_info(call):
    weapon_id = call.data.split("_")[1]
    descriptions = {
        "1": "‚öîÔ∏è –°—Ç–∞–ª—å–Ω–æ–π –º–µ—á\n–ù–∞–¥—ë–∂–Ω—ã–π –º–µ—á —Å –æ—Å—Ç—Ä—ã–º –∫–ª–∏–Ω–∫–æ–º, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –ø—Ä–æ—á–Ω–æ–π —Å—Ç–∞–ª–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –≤–æ–∏–Ω–æ–≤.\n–£—Ä–æ–Ω: 8‚Äì12\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 300\n–í–µ—Å: 4\n–ë–æ–Ω—É—Å HP: 0",
        "2": "üî• –û–≥–Ω–µ–Ω–Ω—ã–π –∫–∏–Ω–∂–∞–ª\n–õ—ë–≥–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π –∫–∏–Ω–∂–∞–ª, –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–≥–Ω—ë–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∞—Ç–∞–∫ –∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞–º —Å –º–∞–ª–æ–π –∑–∞—â–∏—Ç–æ–π.\n–£—Ä–æ–Ω: 5‚Äì9\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 150\n–í–µ—Å: 2\n–ë–æ–Ω—É—Å HP: 0",
        "3": "üßä –õ–µ–¥—è–Ω–æ–π —Ç–æ–ø–æ—Ä\n–¢—è–∂—ë–ª–æ–µ –æ—Ä—É–∂–∏–µ, –ø–æ–∫—Ä—ã—Ç–æ–µ –∏–Ω–µ–µ–º. –ü—Ä–∏ —É–¥–∞—Ä–µ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–¥–ª—è—Ç—å –≤—Ä–∞–≥–æ–≤.\n–£—Ä–æ–Ω: 10‚Äì14\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 200\n–í–µ—Å: 6\n–ë–æ–Ω—É—Å HP: +5",
        "4": "‚ö° –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –ø–æ—Å–æ—Ö\n–ü–æ—Å–æ—Ö –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∞–≥–∞, —Å–ø–æ—Å–æ–±–Ω—ã–π –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑—Ä—è–¥ –º–æ–ª–Ω–∏–∏. –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∞—Ç–∞–∫–∏, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.\n–£—Ä–æ–Ω: 6‚Äì11\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 180\n–í–µ—Å: 3\n–ë–æ–Ω—É—Å HP: +10",
        "5": "üêâ –î—Ä–∞–∫–æ–Ω–∏–π –∫–ª–∏–Ω–æ–∫\n–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ, –≤—ã–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–∑ —á–µ—à—É–∏ –¥—Ä–∞–∫–æ–Ω–∞. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –∏ –Ω–∞–Ω–æ—Å–∏—Ç —Å–µ—Ä—å—ë–∑–Ω—ã–π —É—Ä–æ–Ω.\n–£—Ä–æ–Ω: 12‚Äì16\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 400\n–í–µ—Å: 5\n–ë–æ–Ω—É—Å HP: +20"
    }
    bot.send_message(call.message.chat.id, descriptions.get(weapon_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))

@bot.callback_query_handler(func=lambda call: call.data == "guide_armor")
def guide_armor_category(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ë—Ä–æ–Ω—è —Å—Ç—Ä–∞–∂–∞", callback_data="armor_1"),
        types.InlineKeyboardButton("–ë—Ä–æ–Ω—è —Å–ª–µ–¥–æ–ø—ã—Ç–∞", callback_data="armor_2"),
        types.InlineKeyboardButton("–û–≥–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏", callback_data="armor_3"),
        types.InlineKeyboardButton("–õ–µ–¥—è–Ω–æ–π –ø–∞–Ω—Ü–∏—Ä—å", callback_data="armor_4"),
        types.InlineKeyboardButton("–î—Ä–∞–∫–æ–Ω–∏–π –¥–æ—Å–ø–µ—Ö", callback_data="armor_5")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ë—Ä–æ–Ω—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("armor_"))
def show_armor_info(call):
    armor_id = call.data.split("_")[1]
    descriptions = {
        "1": "üõ°Ô∏è –ë—Ä–æ–Ω—è —Å—Ç—Ä–∞–∂–∞\n–¢—è–∂—ë–ª–∞—è –±—Ä–æ–Ω—è, –∫–æ—Ç–æ—Ä—É—é –Ω–æ—Å—è—Ç –≥–æ—Ä–æ–¥—Å–∫–∏–µ —Å—Ç—Ä–∞–∂–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é –∑–∞—â–∏—Ç—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –±–æ–π—Ü–∞.\n–ë–æ–Ω—É—Å HP: +25\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: 0.08\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 350\n–í–µ—Å: 6",
        "2": "üå≤ –ë—Ä–æ–Ω—è —Å–ª–µ–¥–æ–ø—ã—Ç–∞\n–õ—ë–≥–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ –∫–æ–∂–∏ –∏ —Ç–∫–∞–Ω–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑–≤–µ–¥—á–∏–∫–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –∏ —É–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫.\n–ë–æ–Ω—É—Å HP: +10\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: 0.03\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 200\n–í–µ—Å: 3",
        "3": "üî• –û–≥–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏\n–ó–∞–∫–∞–ª—ë–Ω–Ω–∞—è –±—Ä–æ–Ω—è, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω–∞—è –º–∞–≥–∏–µ–π –æ–≥–Ω—è. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–≥–∞–º–∏ –±–æ–µ–≤—ã—Ö —à–∫–æ–ª.\n–ë–æ–Ω—É—Å HP: +15\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: 0.05\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 250\n–í–µ—Å: 4",
        "4": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–π –ø–∞–Ω—Ü–∏—Ä—å\n–ë–ª–µ—Å—Ç—è—â–∏–π –∫–æ–º–ø–ª–µ–∫—Ç –∏–∑ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª—å–¥–∞ –∏ —Å—Ç–∞–ª–∏. –û—Ç–ª–∏—á–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –∏ —Å–ª–µ–≥–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –º–∞–≥–∏–∏.\n–ë–æ–Ω—É—Å HP: +20\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: 0.06\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 300\n–í–µ—Å: 5",
        "5": "üêâ –î—Ä–∞–∫–æ–Ω–∏–π –¥–æ—Å–ø–µ—Ö\n–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –±—Ä–æ–Ω—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ —á–µ—à—É–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞.\n–ë–æ–Ω—É—Å HP: +40\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: 0.12\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 500\n–í–µ—Å: 7"
    }
    bot.send_message(call.message.chat.id, descriptions.get(armor_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))

@bot.callback_query_handler(func=lambda call: call.data == "guide_potions")
def guide_potions_category(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="potions_1"),
        types.InlineKeyboardButton("–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="potions_2"),
        types.InlineKeyboardButton("–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏", callback_data="potions_3"),
        types.InlineKeyboardButton("–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏", callback_data="potions_4"),
        types.InlineKeyboardButton("–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏", callback_data="potions_5"),
        types.InlineKeyboardButton("–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏", callback_data="potions_6")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–ó–µ–ª—å—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("potions_"))
def show_potions_info(call):
    potions_id = call.data.split("_")[1]
    descriptions = {
        "1": "üß™ –ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n–ü—Ä–æ—Å—Ç–æ–µ –∑–µ–ª—å–µ –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏, –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 25 HP –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n–ë–æ–Ω—É—Å HP: +25\n\n–í–µ—Å: 1",
        "2": "üß™ –ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n–ú–æ—â–Ω–æ–µ –∑–µ–ª—å–µ, –±—ã—Å—Ç—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –±–æ—è.–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 60 HP –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.\n–ë–æ–Ω—É—Å HP: +60\n–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 200\n–í–µ—Å: 2",
        "3": "üß™ –ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏\n–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–∏–ª–∏–≤ —è—Ä–æ—Å—Ç–∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç —É–¥–∞—Ä—ã, –Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–µ–¥–æ–ª–≥–æ.–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ +5 –Ω–∞ 3 —É–¥–∞—Ä–∞.\n–ë–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É: +5\n–í–µ—Å: 1",
        "4": "üß™ –ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ —è—Ä–æ—Å—Ç–∏\n–ú–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–µ–ª—å–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–æ–±–∏–≤–∞—Ç—å –ª—é–±—É—é –∑–∞—â–∏—Ç—É.–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ +8 –Ω–∞ 5 —É–¥–∞—Ä–æ–≤.\n–ë–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É: +8\n–í–µ—Å: 2",
        "5": "üß™ –ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏\n–û–±–≤–æ–ª–∞–∫–∏–≤–∞–µ—Ç –∫–æ–∂—É –∑–∞—â–∏—Ç–Ω–æ–π –º–∞–≥–∏—á–µ—Å–∫–æ–π –±—Ä–æ–Ω—ë–π, –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—è –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω.–ü–æ–≤—ã—à–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É –Ω–∞ +0.05 –Ω–∞ 3 –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞.\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: +0.05\n–í–µ—Å: 1",
        "6": "üß™ –ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∫–∞–º–µ–Ω–Ω–æ–π –∫–æ–∂–∏\n–≠–ª–∏–∫—Å–∏—Ä, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–π –∫–æ–∂—É –≤ –ø–æ–¥–æ–±–∏–µ –∫–∞–º–Ω—è, –¥–µ–ª–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—É—è–∑–≤–∏–º—ã–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.–ü–æ–≤—ã—à–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É –Ω–∞ +0.08 –Ω–∞ 5 –ø–æ–ª—É—á–µ–Ω–∏–π —É—Ä–æ–Ω–∞.\n–°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: +0.08\n–í–µ—Å: 2"
    }
    bot.send_message(call.message.chat.id, descriptions.get(potions_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–µ–±–∞—Ñ—Ñ–∞
debuff = 0

@bot.message_handler(func=lambda message: message.text == "–°–æ—Å—Ç–æ—è–Ω–∏–µ")
def show_status(message):
    # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    base_hp = 100
    base_damage = 5  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –±–µ–∑ –æ—Ä—É–∂–∏—è
    base_damage_reduction = 0.0  # –ë–∞–∑–æ–≤–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    hp_bonus = sum(item.get('hp_bonus', 0) for item in player['equipment'].values() if item)
    damage_bonus = 0
    damage_reduction_bonus = 0.0

    for item in player['equipment'].values():
        if item and 'damage_range' in item:
            damage_bonus += sum(item['damage_range']) / 2  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω
        if item and 'damage_reduction' in item:
            damage_reduction_bonus += item['damage_reduction']

    # –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –¥–µ–±–∞—Ñ—Ñ–∞
    total_hp = base_hp + hp_bonus - debuff
    total_damage = base_damage + damage_bonus
    total_damage_reduction = base_damage_reduction + damage_reduction_bonus

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    status_message = (
        f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n"
        f"üíñ –ó–¥–æ—Ä–æ–≤—å–µ: {total_hp} HP\n"
        f"‚öîÔ∏è –£—Ä–æ–Ω: {total_damage:.1f}\n"
        f"üõ°Ô∏è –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É: {total_damage_reduction * 100:.1f}%\n"
    )

    bot.send_message(message.chat.id, status_message)

@bot.message_handler(commands=['loot'])
def open_chest_command(message, context=None):
    global current_loot

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É–Ω–¥—É–∫–∞
    chest_type = random.choices(
        ["–ú–∞–ª–µ–Ω—å–∫–∏–π —Å—É–Ω–¥—É–∫", "–°—Ä–µ–¥–Ω–∏–π —Å—É–Ω–¥—É–∫", "–ë–æ–ª—å—à–æ–π —Å—É–Ω–¥—É–∫"],
        weights=[0.5, 0.35, 0.15],
        k=1
    )[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—É–Ω–¥—É–∫–µ
    if chest_type == "–ú–∞–ª–µ–Ω—å–∫–∏–π —Å—É–Ω–¥—É–∫":
        item_count = random.choices([1, 2], weights=[0.7, 0.3], k=1)[0]
    elif chest_type == "–°—Ä–µ–¥–Ω–∏–π —Å—É–Ω–¥—É–∫":
        item_count = random.choices([2, 3], weights=[0.7, 0.3], k=1)[0]
    else:  # –ë–æ–ª—å—à–æ–π —Å—É–Ω–¥—É–∫
        item_count = random.choices([4, 5], weights=[0.7, 0.3], k=1)[0]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    loot_items = random.sample(list(ITEMS.values()), item_count)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    current_weight = sum(item['weight'] for item in player['inventory'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä—é–∫–∑–∞–∫
    backpack = player['equipment']['backpack']
    if backpack:
        capacity = BASE_CAPACITY + backpack['capacity_bonus']
    else:
        capacity = BASE_CAPACITY

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–Ω–¥—É–∫–µ
    chest_message = f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ {chest_type}!\n"
    chest_message += f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight}/{capacity}\n"
    chest_message += "–í —Å—É–Ω–¥—É–∫–µ:\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—É–Ω–¥—É–∫–µ
    markup = types.InlineKeyboardMarkup()
    for index, item in enumerate(loot_items):
        item_text = f"{item['name']} (–í–µ—Å: {item['weight']})"
        btn = types.InlineKeyboardButton(f"–í–∑—è—Ç—å {item_text}", callback_data=f"take_{index}")
        markup.add(btn)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
    close_btn = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫", callback_data=f"close_chest_{context}")
    markup.add(close_btn)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ª—É—Ç
    current_loot = loot_items

    bot.send_message(message.chat.id, chest_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("take_"))
def take_loot(call):
    global current_loot

    item_index = int(call.data.replace("take_", ""))

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –ª—É—Ç–µ
    if 0 <= item_index < len(current_loot):
        item = current_loot[item_index]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        current_weight = sum(i['weight'] for i in player['inventory'])
        backpack = player['equipment']['backpack']
        capacity = BASE_CAPACITY + backpack['capacity_bonus'] if backpack else BASE_CAPACITY

        if current_weight + item['weight'] <= capacity:
            player['inventory'].append(item)
            current_loot.pop(item_index)
            bot.answer_callback_query(call.id, text=f"–¢—ã –≤–∑—è–ª: {item['name']}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–Ω–¥—É–∫–µ
            update_chest_message(call.message)
        else:
            bot.answer_callback_query(call.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
    else:
        bot.answer_callback_query(call.id, text="–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—É–Ω–¥—É–∫–µ")

def update_chest_message(message):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    current_weight = sum(item['weight'] for item in player['inventory'])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä—é–∫–∑–∞–∫
    backpack = player['equipment']['backpack']
    if backpack:
        capacity = BASE_CAPACITY + backpack['capacity_bonus']
    else:
        capacity = BASE_CAPACITY

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–Ω–¥—É–∫–µ
    chest_message = f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight}/{capacity}\n"
    chest_message += "–í —Å—É–Ω–¥—É–∫–µ:\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å—É–Ω–¥—É–∫–µ
    markup = types.InlineKeyboardMarkup()
    for index, item in enumerate(current_loot):
        item_text = f"{item['name']} (–í–µ—Å: {item['weight']})"
        btn = types.InlineKeyboardButton(f"–í–∑—è—Ç—å {item_text}", callback_data=f"take_{index}")
        markup.add(btn)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
    close_btn = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫", callback_data="close_chest")
    markup.add(close_btn)

    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=chest_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("close_chest_"))
def close_chest(call):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ callback_data
    context = call.data.split("_")[2]
    print(context)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—É–Ω–¥—É–∫–∞
    close_message = (
        "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—É–Ω–¥—É–∫ –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã. "
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–æ–π –ø—É—Ç—å."
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    markup = types.InlineKeyboardMarkup()
    if context == "dark":
        dark_corridor_btn = types.InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä", callback_data="enter_dark_corridor")
        markup.add(dark_corridor_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=close_message,
        reply_markup=markup
    )

# –ù–ê–ß–ê–õ–û –ö–í–ï–°–¢–ê.................................................................................................................................................

@bot.message_handler(commands=['quest'])
def start_quest(message):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫–≤–µ—Å—Ç–∞
    quest_message = (
        "–í—ã ‚Äî –º–æ–ª–æ–¥–æ–π –≤–æ–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ –≤ –ê–∫–∞–¥–µ–º–∏–∏ –ë–æ–µ–≤—ã—Ö –ò—Å–∫—É—Å—Å—Ç–≤. "
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –¥–æ–±–ª–µ—Å—Ç—å –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –ø—Ä–æ–π–¥—è —á–µ—Ä–µ–∑ –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã, "
        "–≥–¥–µ, –ø–æ –ª–µ–≥–µ–Ω–¥–∞–º, —Å–∫—Ä—ã—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–¥—å–±—É –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    start_btn = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="start_journey")
    flee_btn = types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="flee")
    markup.add(start_btn, flee_btn)

    bot.send_message(message.chat.id, quest_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "start_journey")
def start_journey(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
    journey_message = (
        "–í—ã —Ä–µ—à–∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã. "
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –¥–≤–∞ –ø—É—Ç–∏: –Ω–∞–ª–µ–≤–æ –∏ –Ω–∞–ø—Ä–∞–≤–æ."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É—Ç–∏
    markup = types.InlineKeyboardMarkup()
    left_btn = types.InlineKeyboardButton("–ù–∞–ª–µ–≤–æ", callback_data="go_left")
    right_btn = types.InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–æ", callback_data="go_right")
    markup.add(left_btn, right_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=journey_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "flee")
def flee(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–≥–µ
    flee_message = (
        "–í—ã –ø–æ–∑–æ—Ä–Ω–æ —Å–±–µ–∂–∞–ª–∏ –∏ –ø–æ—Å–µ–ª–∏–ª–∏—Å—å –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –¥–æ–º–µ –≤ –ª–µ—Å—É –ø–æ–¥ –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º."
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞
    markup = types.InlineKeyboardMarkup()
    retry_btn = types.InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_quest")
    markup.add(retry_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=flee_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "retry_quest")
def retry_quest(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞—á–∞–ª–µ –∫–≤–µ—Å—Ç–∞
    retry_message = (
        "–í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞. –í—ã ‚Äî –º–æ–ª–æ–¥–æ–π –≤–æ–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ –≤ –ê–∫–∞–¥–µ–º–∏–∏ –ë–æ–µ–≤—ã—Ö –ò—Å–∫—É—Å—Å—Ç–≤. "
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –¥–æ–±–ª–µ—Å—Ç—å –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –ø—Ä–æ–π–¥—è —á–µ—Ä–µ–∑ –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã, "
        "–≥–¥–µ, –ø–æ –ª–µ–≥–µ–Ω–¥–∞–º, —Å–∫—Ä—ã—Ç –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–¥—å–±—É –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    start_btn = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", callback_data="start_journey")
    flee_btn = types.InlineKeyboardButton("–°–±–µ–∂–∞—Ç—å", callback_data="flee")
    markup.add(start_btn, flee_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=retry_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "go_left")
def go_left(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø—É—Ç–∏ –Ω–∞–ª–µ–≤–æ
    left_message = (
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É—Ç—å –Ω–∞–ª–µ–≤–æ –∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ø—è—â–µ–≥–æ –≤–æ–ª–∫–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –Ω–∏–º –∏–ª–∏ —Ç–∏—Ö–æ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    fight_btn = types.InlineKeyboardButton("–°—Ä–∞–∑–∏—Ç—å—Å—è", callback_data="fight_wolf")
    sneak_btn = types.InlineKeyboardButton("–¢–∏—Ö–æ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ", callback_data="sneak_past")
    markup.add(fight_btn, sneak_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=left_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "go_right")
def go_right(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø—É—Ç–∏ –Ω–∞–ø—Ä–∞–≤–æ
    right_message = (
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ –∏ —É–≤–∏–¥–µ–ª–∏ —Å—É–Ω–¥—É–∫. "
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ –≤ —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    open_chest_btn = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫", callback_data="open_chest_dark_corridor")
    continue_btn = types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –º–∏–º–æ –≤ —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä", callback_data="enter_dark_corridor")
    markup.add(open_chest_btn, continue_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=right_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "fight_wolf")
def fight_wolf(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ä–∞–∂–µ–Ω–∏–∏ —Å –≤–æ–ª–∫–æ–º
    fight_message = (
        "–í–∞—à –≥–æ—Ä—è—á–∏–π —Ä–∞–∑—É–º –∑–∞—Ö–æ—Ç–µ–ª –∫—Ä–æ–≤–∏, –Ω–æ –≤—ã –±—ã–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã –∏ –Ω–∞–∏–≤–Ω—ã, "
        "–±—Ä–æ—Å–∏–≤—à–∏—Å—å –Ω–∞ –≤–æ–ª–∫–∞ —Å –≥–æ–ª—ã–º–∏ —Ä—É–∫–∞–º–∏. –û–Ω –æ–¥–Ω–∏–º –ø—Ä—ã–∂–∫–æ–º –≤–ø–∏–ª—Å—è –∑—É–±–∞–º–∏ –≤–∞–º –≤ —à–µ—é –∏ –ø–µ—Ä–µ–∫—É—Å–∏–ª –µ–µ. "
        "–í–æ–ª–∫ –ª–µ–≥ –¥–∞–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å, –¥–∞–∂–µ –Ω–µ –∑–∞—Ö–æ—Ç–µ–≤ –≤–∞—Å —Å—ä–µ—Å—Ç—å, –∞ –≤—ã —É–º–∏—Ä–∞–µ—Ç–µ –∏—Å—Ç–µ–∫–∞—è –∫—Ä–æ–≤—å—é.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É —ç—Ç–æ–≥–æ –æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    retry_btn = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="retry_quest")
    end_btn = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data="end_quest")
    markup.add(retry_btn, end_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=fight_message,
        reply_markup=markup
    )



@bot.callback_query_handler(func=lambda call: call.data == "open_chest_dark_corridor")
def open_chest_dark_corridor(call):
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    open_chest_command(call.message, context="dark")



@bot.callback_query_handler(func=lambda call: call.data == "enter_dark_corridor")
def enter_dark_corridor(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä
    dark_corridor_message = (
        "–í—ã –≤–æ—à–ª–∏ –≤ —Ç–µ–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä. "
        "–°–ø—Ä–∞–≤–∞ –ø–æ —Å—Ç–µ–Ω–µ –≤—ã –Ω–∞—â—É–ø–∞–ª–∏ —Ñ–∞–∫–µ–ª, –∑–∞–∂–µ—á—å –µ–≥–æ, –≤—Ä–∞–≥–∏ –º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤–µ—Ç?"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    light_torch_btn = types.InlineKeyboardButton("–ó–∞–∂–µ—á—å —Ñ–∞–∫–µ–ª", callback_data="light_torch")
    go_in_darkness_btn = types.InlineKeyboardButton("–ò–¥—Ç–∏ –≤ —Ç–µ–º–Ω–æ—Ç–µ", callback_data="go_in_darkness")
    markup.add(light_torch_btn, go_in_darkness_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=dark_corridor_message,
        reply_markup=markup
    )



@bot.callback_query_handler(func=lambda call: call.data == "go_in_darkness")
def go_in_darkness(call):
    global debuff

    # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
    debuff = 10

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Ç–µ–º–Ω–æ—Ç—É
    go_in_darkness_message = (
        "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É –≤ —Ç–µ–º–Ω–æ—Ç–µ –∏ –ø–æ–ø–∞–ª–∏ –≤ –ª–æ–≤—É—à–∫—É, "
        "–≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ª–µ–≥–∫—É—é —Ä–∞–Ω—É –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ 10 –•–ü. –í—ã –≤ —Å–∏–ª–∞—Ö –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ, –Ω–æ –≤—ã —Å–ª–∞–±—ã."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    rest_btn = types.InlineKeyboardButton("–õ–µ—á—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å", callback_data="rest")
    continue_btn = types.InlineKeyboardButton("–ü–æ–π—Ç–∏ –¥–∞–ª—å—à–µ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É", callback_data="continue_corridor")
    markup.add(rest_btn, continue_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=go_in_darkness_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "rest")
def rest(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–¥—ã—Ö–µ
    rest_message = (
        "–í—ã –±–µ–∑ —Å–∏–ª –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –≤ —Å–æ–Ω –∏ –∑–∞–º–µ—Ä–∑–ª–∏ –Ω–∞—Å–º–µ—Ä—Ç—å, "
        "–æ–±–∏–¥–Ω–∞—è —Å–º–µ—Ä—Ç—å –¥–ª—è –≥–µ—Ä–æ—è, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    retry_btn = types.InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="retry_quest")
    end_btn = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data="end_quest")
    markup.add(retry_btn, end_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=rest_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "continue_corridor")
def continue_corridor(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø—É—Ç–∏ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É
    continue_corridor_message = (
        "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É."
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=continue_corridor_message
    )

@bot.callback_query_handler(func=lambda call: call.data == "end_quest")
def end_quest(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
    end_message = (
        "–ë—É–¥–µ–º –∂–¥–∞—Ç—å —Ç–µ–±—è \"–≥–µ—Ä–æ–π\" —Å–Ω–æ–≤–∞."
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=end_message
    )

@bot.callback_query_handler(func=lambda call: call.data == "light_torch")
def light_torch(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∂–∏–≥–∞–Ω–∏–∏ —Ñ–∞–∫–µ–ª–∞
    light_torch_message = (
        "–ó–∞–∂–µ—á—å —Ñ–∞–∫–µ–ª –±—ã–ª–æ —Ö–æ—Ä–æ—à–µ–π –∏–¥–µ–µ–π, –≤—ã —É–≤–∏–¥–µ–ª–∏ –ª–æ–≤—É—à–∫—É, –æ–±–æ–π—Ç–∏ –µ–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –Ω–æ –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å..."
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    jump_btn = types.InlineKeyboardButton("–ü–µ—Ä–µ–ø—Ä—ã–≥–Ω—É—Ç—å", callback_data="jump_trap")
    go_left_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –ø–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ", callback_data="go_left")
    markup.add(jump_btn, go_left_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=light_torch_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "jump_trap")
def jump_trap(call):
    global debuff

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è –ª–æ–≤—É—à–∫–∏
    success = random.choices([True, False], weights=[0.5, 0.5], k=1)[0]

    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–∏ –ª–æ–≤—É—à–∫–∏
        jump_success_message = (
            "–ï—â–µ –±—ã —á—É—Ç—å-—á—É—Ç—å –∏ –≤—ã –Ω–µ –¥–æ–ø—Ä—ã–≥–Ω—É–ª–∏, –º–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å."
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏
        markup = types.InlineKeyboardMarkup()
        continue_btn = types.InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É", callback_data="continue_corridor")
        markup.add(continue_btn)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=jump_success_message,
            reply_markup=markup
        )
    else:
        # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
        debuff = 5

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–∏ –ª–æ–≤—É—à–∫–∏
        jump_failure_message = (
            f"–í—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ —Å–≤–æ–∏ —Å–∏–ª—ã –∏ —É–≥–æ–¥–∏–ª–∏ –≤ –ª–æ–≤—É—à–∫—É, –ø–æ–ª—É—á–∏–≤ –ª–µ–≥–∫—É—é —Ä–∞–Ω—É (-5 –•–ü). "
            "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—É—Ç—å."
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É—Ç–∏
        markup = types.InlineKeyboardMarkup()
        continue_btn = types.InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É", callback_data="continue_corridor")
        markup.add(continue_btn)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=jump_failure_message,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "continue_corridor")
def continue_corridor(call):
    global debuff

    # –û–±–Ω—É–ª—è–µ–º –¥–µ–±–∞—Ñ—Ñ
    debuff = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø—É—Ç–∏ –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É
    continue_corridor_message = (
        "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É."
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=continue_corridor_message
    )

@bot.callback_query_handler(func=lambda call: call.data == "sneak_past")
def sneak_past(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª
    sneak_message = (
        "–í—ã —Ç–∏—Ö–æ –ø—Ä–æ—à–ª–∏ –º–∏–º–æ –≤–æ–ª–∫–∞ –∏ –≤–æ—à–ª–∏ –≤ –æ–≥—Ä–æ–º–Ω—ã–π —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª. "
        "–ù–∞ —Ç—Ä–æ–Ω–µ —Å–∏–¥–∏—Ç —Å—Ç–∞—Ä–∏–∫ –≤ —á–µ—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏. –û–Ω –≥–æ–≤–æ—Ä–∏—Ç: "
        "\"–Ø –∂–¥–∞–ª —Ç–µ–±—è, –º–æ–ª–æ–¥–æ–π –≤–æ–∏–Ω. –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å –º–Ω–µ.\""
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    talk_btn = types.InlineKeyboardButton("–ü–æ–¥–æ–π—Ç–∏ –∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –Ω–∏–º", callback_data="talk_to_old_man")
    door_btn = types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤ –¥–≤–µ—Ä—å —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ–≥–æ", callback_data="enter_door")
    markup.add(talk_btn, door_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=sneak_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "talk_to_old_man")
def talk_to_old_man(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å–æ —Å—Ç–∞—Ä—Ü–µ–º
    talk_message = (
        "\"–Ø –±—ã–ª –∫–æ–≥–¥–∞-—Ç–æ –º–æ–ª–æ–¥, –∫–∞–∫ —Ç—ã, –∏ –∏—Å–∫–∞–ª –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –í —ç—Ç–æ–º –º–µ—Å—Ç–µ —è —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–±—ã–≤–∞–ª–æ–π —Å–∏–ª–æ–π. "
        "–° –¥—Ä–∞–∫–æ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –¥—ã—à–∏—Ç –æ–≥–Ω–µ–º –∏ –ø–ª—é–µ—Ç—Å—è –ª–∞–≤–æ–π. –ú–Ω–µ –ø–æ—á—Ç–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–±–µ–¥–∏—Ç—å –µ–≥–æ, "
        "–Ω–æ –º–æ–π –º–µ—á –∑–∞—Å—Ç—Ä—è–ª –≤ –µ–≥–æ —Ç–≤–µ—Ä–¥–æ–π, –∫–∞–∫ –∫–∞–º–µ–Ω—å, —á–µ—à—É–µ. –ú–Ω–µ –ø—Ä–∏—à–ª–∏ –Ω–∞ –ø–æ–º–æ—â—å –º–æ–∏ –±—Ä–∞—Ç—å—è –ø–æ –æ—Ä—É–∂–∏—é, "
        "—è –±—ã–ª –≤–µ—Å—å –∏–∑–±–∏—Ç, –æ–Ω–∏ —Å–ø–∞—Å–ª–∏ –º–µ–Ω—è –∏ –æ—Ç–Ω–µ—Å–ª–∏ –∫ –ª–µ–∫–∞—Ä—é –≤ –±–ª–∏–∂–∞–π—à—É—é –¥–µ—Ä–µ–≤–Ω—é. "
        "–ú–æ–∏ —Ä–∞–Ω—ã –æ—Å—Ç–∞–ª–∏—Å—å —Å–æ –º–Ω–æ–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å. –ú–æ–∏ –¥–Ω–∏ —Å–æ—á—Ç–µ–Ω—ã, –Ω–æ —è –Ω–µ –º–æ–≥—É —É–º–µ—Ä–µ—Ç—å —Å–æ —Å–ø–æ–∫–æ–π–Ω–æ–π –¥—É—à–æ–π "
        "–±–µ–∑ –º–æ–µ–≥–æ –æ—Ä—É–∂–∏—è, —ç—Ç–æ –ø–æ–∑–æ—Ä –¥–ª—è –≤–æ–∏–Ω–∞. –ü–æ–º–æ–≥–∏ —Å—Ç–∞—Ä—Ü—É, –ø—Ä–∏–Ω–µ—Å–∏ –º–Ω–µ –º–æ–µ –æ—Ä—É–∂–∏–µ.\""
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    markup = types.InlineKeyboardMarkup()
    accept_btn = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–æ—Å—å–±—É", callback_data="accept_request")
    refuse_btn = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data="refuse_request")
    markup.add(accept_btn, refuse_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=talk_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "accept_request")
def accept_request(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–æ—Å—å–±—ã
    accept_message = (
        "–í—ã –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –≤–æ–∏–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–æ—Å—å–±—É —Å—Ç–∞—Ä—Ü–∞, –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–º –Ω–∞ –¥–≤–µ—Ä—å —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ–≥–æ."
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¥–≤–µ—Ä—å
    markup = types.InlineKeyboardMarkup()
    enter_door_btn = types.InlineKeyboardButton("–í–æ–π—Ç–∏ –≤ –¥–≤–µ—Ä—å", callback_data="enter_door")
    markup.add(enter_door_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=accept_message,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "refuse_request")
def refuse_request(call):
    global debuff

    # –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
    debuff = 20

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
    refuse_message = (
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ —Å—Ç–∞—Ä—Ü—É, –æ–Ω –≤ –ø—Ä–æ—à–ª–æ–º —É—á–∏–ª—Å—è –≤ –ê–∫–∞–¥–µ–º–∏–∏ —á–∞—Ä–æ–¥–µ–µ–≤. "
        "–û–Ω –≤–∞—Å –ø—Ä–æ–∫–ª–∏–Ω–∞–µ—Ç, –∏ –≤—ã —Ç–µ—Ä—è–µ—Ç–µ 20 –•–ü.–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –°–õ–ï–î–£–ï–¢"
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=refuse_message
    )

@bot.callback_query_handler(func=lambda call: call.data == "enter_door")
def enter_door(call):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ –¥–≤–µ—Ä—å
    enter_door_message = (
        "–í—ã –≤–æ—à–ª–∏ –≤ –¥–≤–µ—Ä—å –∏ —Å–ª—ã—à–∏—Ç–µ –∏—Å—Ç–æ–≤—ã–π —Ä–µ–≤ –¥—Ä–∞–∫–æ–Ω–∞, "
        "–ø–æ –≤–∞—à–µ–º—É —Ç–µ–ª—É –ø—Ä–æ–±–µ–≥–∞–µ—Ç –¥—Ä–æ–∂—å. –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –°–õ–ï–î–£–ï–¢."
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=enter_door_message
    )

bot.polling()

